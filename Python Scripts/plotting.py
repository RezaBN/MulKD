{"cells":[{"cell_type":"code","source":["# plotting.py\n","\"\"\"\n","This file contains all functions related to plotting results, including training\n","progress, confusion matrices, and summary comparison bar charts.\n","\"\"\"\n","\n","import os\n","import numpy as np\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Import flags from config to conditionally use libraries\n","from config import MATPLOTLIB_AVAILABLE, SKLEARN_AVAILABLE, SEABORN_AVAILABLE, DATASET_SUBSET_FRACTION\n","\n","\n","def plot_training_progress(history_data, model_name_plot, save_dir_plot, total_epochs_plot):\n","    \"\"\"Plots training loss components and test accuracy over epochs.\"\"\"\n","    if not MATPLOTLIB_AVAILABLE:\n","        print(f\"Matplotlib not available. Skipping training progress plot for {model_name_plot}.\")\n","        return\n","\n","    epochs_ran = len(history_data.get('total_loss', []))\n","    if epochs_ran == 0:\n","        print(f\"No training history to plot for {model_name_plot}.\")\n","        return\n","\n","    epoch_nums = range(1, epochs_ran + 1)\n","    fig, axs = plt.subplots(2, 1, figsize=(12, 10))\n","\n","    # Plot loss components\n","    axs[0].plot(epoch_nums, history_data['total_loss'], label='Total Training Loss', color='red', marker='o', markersize=2)\n","    if 'ce_loss' in history_data and any(val != 0 for val in history_data['ce_loss']):\n","        axs[0].plot(epoch_nums, history_data['ce_loss'], label='CE Loss', linestyle='--', color='blue')\n","    if 'kd_loss' in history_data and any(val != 0 for val in history_data['kd_loss']):\n","        axs[0].plot(epoch_nums, history_data['kd_loss'], label='KD Loss (Weighted)', linestyle='--', color='green')\n","    if 'crd_loss' in history_data and any(val != 0 for val in history_data['crd_loss']):\n","        axs[0].plot(epoch_nums, history_data['crd_loss'], label='CRD Loss (Weighted)', linestyle='--', color='purple')\n","\n","    axs[0].set_xlabel(f'Epoch (ran {epochs_ran}/{total_epochs_plot})')\n","    axs[0].set_ylabel('Loss')\n","    axs[0].set_title(f'Training Loss for {model_name_plot}')\n","    axs[0].legend()\n","    axs[0].grid(True, linestyle='--', alpha=0.6)\n","\n","    # Plot test accuracy\n","    if 'test_acc' in history_data and history_data['test_acc']:\n","        axs[1].plot(epoch_nums, history_data['test_acc'], label='Test Accuracy', color='orange', marker='o', markersize=2)\n","        axs[1].set_xlabel(f'Epoch (ran {epochs_ran}/{total_epochs_plot})')\n","        axs[1].set_ylabel('Accuracy (%)')\n","        axs[1].set_title(f'Test Accuracy for {model_name_plot}')\n","        axs[1].legend()\n","        axs[1].grid(True, linestyle='--', alpha=0.6)\n","        axs[1].set_ylim(0, 100)\n","    else:\n","        axs[1].text(0.5, 0.5, 'No test accuracy data.', transform=axs[1].transAxes, ha='center', va='center')\n","        axs[1].set_title(f'Test Accuracy for {model_name_plot}')\n","\n","    fig.tight_layout()\n","    safe_model_name = model_name_plot.replace('/', '_').replace(' ', '_')\n","    plot_filename = os.path.join(save_dir_plot, f\"training_progress_{safe_model_name}_epochs{total_epochs_plot}.png\")\n","    try:\n","        plt.savefig(plot_filename)\n","        print(f\"Training progress plot saved to {plot_filename}\")\n","        plt.close(fig)\n","    except Exception as e:\n","        print(f\"Error saving training progress plot for {model_name_plot}: {e}\")\n","\n","def plot_confusion_matrix(y_true, y_pred, class_names, model_name, save_dir, epochs_suffix=\"\"):\n","    \"\"\"Plots and saves a confusion matrix.\"\"\"\n","    if not SKLEARN_AVAILABLE or not MATPLOTLIB_AVAILABLE:\n","        print(f\"Scikit-learn/Matplotlib not available. Skipping confusion matrix for {model_name}.\")\n","        return\n","    if y_true is None or y_pred is None or len(y_true) == 0 or len(y_pred) == 0:\n","        print(f\"Not enough data to plot confusion matrix for {model_name}.\")\n","        return\n","\n","    cm = confusion_matrix(y_true.numpy(), y_pred.numpy())\n","    plt.figure(figsize=(10, 8))\n","\n","    if SEABORN_AVAILABLE:\n","        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n","    else:\n","        plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n","        plt.colorbar()\n","        tick_marks = np.arange(len(class_names))\n","        plt.xticks(tick_marks, class_names, rotation=45, ha=\"right\")\n","        plt.yticks(tick_marks, class_names)\n","        thresh = cm.max() / 2.\n","        for i, j in np.ndindex(cm.shape):\n","            plt.text(j, i, format(cm[i, j], 'd'), ha=\"center\", va=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.title(f'Confusion Matrix - {model_name}{epochs_suffix}')\n","    plt.ylabel('True Label')\n","    plt.xlabel('Predicted Label')\n","    plt.tight_layout()\n","\n","    safe_model_name = model_name.replace('/', '_').replace(' ', '_')\n","    plot_filename = os.path.join(save_dir, f\"confusion_matrix_{safe_model_name}{epochs_suffix.replace(' ','_')}.png\")\n","    try:\n","        plt.savefig(plot_filename)\n","        print(f\"Confusion matrix plot saved to {plot_filename}\")\n","        plt.close()\n","    except Exception as e:\n","        print(f\"Error saving confusion matrix plot for {model_name}: {e}\")\n","\n","def print_summary_table(results, student_model_configs_table):\n","    \"\"\"Prints a formatted summary table of all model results.\"\"\"\n","    print(\"\\n\\n\" + \"=\"*80)\n","    print(\"===== CIFAR-10 Performance Summary: Scratch vs. MulKD (CRD+Logits) =====\")\n","    print(f\"Data Used: {DATASET_SUBSET_FRACTION*100:.0f}% of CIFAR-10\")\n","    header = f\"{'Model Key':<45} | {'Architecture':<18} | {'Training':<20} | {'Epochs':<8} | {'Accuracy (%)':<12} | {'Time (s)':<10}\"\n","    print(header)\n","    print(\"-\" * len(header))\n","\n","    def _print_line(key, arch, method, res_dict):\n","        data = res_dict.get(key)\n","        acc_str = f\"{data['acc']:.2f}\" if data and 'acc' in data else \"N/A\"\n","        time_str = f\"{data['time']:.2f}\" if data and 'time' in data else \"N/A\"\n","        epochs_str = str(data.get('epochs', 'N/A')) if data else \"N/A\"\n","        print(f\"{key:<45} | {arch:<18} | {method:<20} | {epochs_str:<8} | {acc_str:<12} | {time_str:<10}\")\n","\n","    def get_arch(key_str):\n","        parts = key_str.split('_')\n","        return parts[1] if \"ResNet\" in key_str and len(parts) > 1 else (\n","            \"MobileNetV2\" if \"MobileNetV2\" in key_str else (\n","            \"ShuffleNetV2\" if \"ShuffleNetV2\" in key_str else \"Unknown\"))\n","\n","    teacher_keys = [\n","        (\"Grandmaster_ResNet110_S\", \"Scratch\"), (\"TA1_L1_ResNet56_S\", \"Scratch\"),\n","        (\"TA1_L1_ResNet56_M\", \"MulKD (GM)\"), (\"TA2_L1_ResNet50_S\", \"Scratch\"),\n","        (\"TA2_L1_ResNet50_M\", \"MulKD (GM)\"), (\"Master_ResNet44_S\", \"Scratch\"),\n","        (\"Master_ResNet44_M\", \"MulKD (L1 TAs)\"), (\"TA1_L2_ResNet38_S\", \"Scratch\"),\n","        (\"TA1_L2_ResNet38_M\", \"MulKD (Master)\"), (\"TA2_L2_ResNet32_S\", \"Scratch\"),\n","        (\"TA2_L2_ResNet32_M\", \"MulKD (Master)\"), (\"CM_ResNet20_S\", \"Scratch\"),\n","        (\"CM_ResNet20_M\", \"MulKD (L2 TAs)\"),\n","    ]\n","    for key, method in teacher_keys:\n","        _print_line(key, get_arch(key), method, results)\n","\n","    print(\"-\" * len(header))\n","\n","    for stud_name, _ in student_model_configs_table:\n","        _print_line(f\"Student_{stud_name}_S\", stud_name, \"Scratch\", results)\n","        _print_line(f\"Student_{stud_name}_M_from_Master\", stud_name, \"MulKD (Master)\", results)\n","        _print_line(f\"Student_{stud_name}_M_from_CM\", stud_name, \"MulKD (CM)\", results)\n","        print(\"-\" * len(header))\n","    print(\"=\"*80 + \"\\n\")\n","\n","def plot_student_model_comparison(results_plot, student_model_configs_plot, save_dir, epochs):\n","    \"\"\"Plots a bar chart comparing student models trained from scratch vs. with distillation.\"\"\"\n","    if not MATPLOTLIB_AVAILABLE: return\n","\n","    student_archs = [c[0] for c in student_model_configs_plot]\n","    scratch_accs = [results_plot.get(f\"Student_{arch}_S\", {}).get('acc', 0) for arch in student_archs]\n","    mulkd_master_accs = [results_plot.get(f\"Student_{arch}_M_from_Master\", {}).get('acc', 0) for arch in student_archs]\n","    mulkd_cm_accs = [results_plot.get(f\"Student_{arch}_M_from_CM\", {}).get('acc', 0) for arch in student_archs]\n","\n","    x = np.arange(len(student_archs))\n","    width = 0.25\n","    fig, ax = plt.subplots(figsize=(14, 8))\n","\n","    rects1 = ax.bar(x - width, scratch_accs, width, label='Scratch', color='skyblue')\n","    rects2 = ax.bar(x, mulkd_master_accs, width, label='MulKD (from Master)', color='coral')\n","    rects3 = ax.bar(x + width, mulkd_cm_accs, width, label='MulKD (from CM)', color='lightgreen')\n","\n","    ax.set_ylabel('Accuracy (%)')\n","    ax.set_title(f'Student Model Performance ({DATASET_SUBSET_FRACTION*100:.0f}% Data, {epochs} Epochs)')\n","    ax.set_xticks(x)\n","    ax.set_xticklabels(student_archs)\n","    ax.legend()\n","    ax.bar_label(rects1, padding=3, fmt='%.1f')\n","    ax.bar_label(rects2, padding=3, fmt='%.1f')\n","    ax.bar_label(rects3, padding=3, fmt='%.1f')\n","\n","    max_acc = max(max(scratch_accs), max(mulkd_master_accs), max(mulkd_cm_accs))\n","    ax.set_ylim(0, max(100, max_acc * 1.15))\n","    fig.tight_layout()\n","\n","    plot_filename = os.path.join(save_dir, f\"student_comparison_subset{int(DATASET_SUBSET_FRACTION*100)}.png\")\n","    try:\n","        plt.savefig(plot_filename)\n","        print(f\"\\nStudent model comparison plot saved to {plot_filename}\")\n","        plt.close(fig)\n","    except Exception as e:\n","        print(f\"Error saving student comparison plot: {e}\")"],"outputs":[],"execution_count":null,"metadata":{"id":"a1fA9AwADAeI"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}